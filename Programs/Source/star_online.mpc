# coding: latin-1

from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else

PORTNUM = 14000
MAX_NUM_CLIENTS = 8
NUM_EXPECTED_INPUTS = 4

def accept_client_input():
    """
    Wait for socket connection, send share of random value, receive input and deduce share.
    Expect 6 inputs: unique id, (x, r_1, y, r_2),  and flag to indicate end of this round.
    """
    client_socket_id = regint()
    acceptclientconnection(client_socket_id, PORTNUM)
    
    client_inputs = sint.receive_from_client(6, client_socket_id)

    return client_socket_id, client_inputs[5], client_inputs


def compute_division(number_clients, client_values):
    """use the value and randomness to perform division x/y
    Each client i submits (x+r,r_1i, y+r, r_2i) where r = sum r_i
    """
    x = Array(1, sint)
    y = Array(1, sint)
    x[0] = client_values[0] - client_values[1]
    y[0] = client_values[2] - client_values[3]

    @for_range(number_clients-1)
    def loop_body(i):
        # subtract the randomness constributed by each client
        x[0] = x[0] - client_values[i*4 + 1]
        y[0] = y[0]  - client_values[i*4 + 3]

    scalefix = cfix() 
    scalefix.load_int(2**40)
    xfix = sfix()
    xfix.load_int(x[0])
    yfix = sfix()
    yfix.load_int(y[0])
    
    return xfix/yfix


def write_winner_to_clients(sockets, number_clients, winning_client_id):
    """Send share of winning client id to all clients who joined game."""

    # Setup authenticate result using share of random.
    # client can validate SUM winning_client_id * SUM rnd_from_triple = SUM auth_result
    rnd_from_triple = sint.get_random_triple()[0]
    auth_result = winning_client_id * rnd_from_triple

    @for_range(number_clients)
    def loop_body(i):
        sint.write_shares_to_socket(sockets[i], [winning_client_id, rnd_from_triple, auth_result])


def main():
    """Listen in while loop for players to join a game.
    Once maxiumum reached or have notified that round finished, run comparison and return result."""
    # Start listening for client socket connections
    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    @do_while
    def main_loop():
        print_ln('waiting for inputs...')

        # Clients socket id (integer).
        client_sockets = Array(MAX_NUM_CLIENTS, regint)
      
        # Number of clients
        number_clients = MemValue(regint(0))
      
        # all client secret input.
        client_values = Array(MAX_NUM_CLIENTS*NUM_EXPECTED_INPUTS, sint)
      
        # Client ids to identity client
        client_ids = Array(MAX_NUM_CLIENTS, sint)

        # Loop round waiting for each client to connect
        @do_while
        def client_connections():
            
            # Clients secret input.
            inputs = Array(NUM_EXPECTED_INPUTS + 3, sint)
      
            client_sockets[number_clients], finish, inputs = accept_client_input()

            # count from 1 since 0 is client_id!
            client_values[number_clients*4] = inputs[1]
            client_values[number_clients*4 + 1] = inputs[2]
            client_values[number_clients*4 + 2] = inputs[3]
            client_values[number_clients*4 + 3] = inputs[4]

            print_ln('received (x, r_1, y, r_2): (%s, %s, %s, %s)', client_values[0].reveal(), client_values[1].reveal(), client_values[2].reveal(), client_values[3].reveal())

            # increment the number of clients
            number_clients.write(number_clients+1)

            # continue while both expressions are false
            return (number_clients >= MAX_NUM_CLIENTS) + finish.reveal() == 0 

        res = compute_division(number_clients, client_values)
        print_ln('division result is = %s', res.reveal())

        write_winner_to_clients(client_sockets, number_clients, res.conv())

        return True

main()
