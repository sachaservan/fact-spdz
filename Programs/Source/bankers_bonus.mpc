# (C) 2018 University of Bristol. See License.txt
# coding: latin-1
"""
  Solve Bankers bonus, aka Millionaires problem.
  to deduce the maximum value from a range of integer input.

  Demonstrate clients external to computing parties supplying input and receiving an authenticated result. See bankers-bonus-client.cpp for client (and setup instructions).

  For an implementation with communications security see bankers_bonus_commsec.mpc.
  
  Wait for MAX_NUM_CLIENTS to join the game or client finish flag to be sent
  before calculating the maximum.

  Note each client connects in a single thread and so is potentially blocked.
  
  Each round / game will reset and so this runs indefinitiely.
"""

from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else

PORTNUM = 14000
MAX_NUM_CLIENTS = 8

def accept_client_input():
    """
    Wait for socket connection, send share of random value, receive input and deduce share.
    Expect 3 inputs: unique id, action type, and flag to indicate end of this round.
    """
    client_socket_id = regint()
    acceptclientconnection(client_socket_id, PORTNUM)
    
    client_inputs = sint.receive_from_client(3, client_socket_id)

    return client_socket_id, client_inputs[0], client_inputs[1], client_inputs[2]

def write_value_to_clients(sockets, number_clients, value):
    rnd_from_triple = sint.get_random_triple()[0]
    auth_result = value * rnd_from_triple

    @for_range(number_clients)
    def loop_body(i):
        sint.write_shares_to_socket(sockets[i], [value, rnd_from_triple, auth_result])


def main():
    """Listen in while loop for players to join a game.
    Once maxiumum reached or have notified that round finished, run comparison and return result."""
    # Start listening for client socket connections
    listen(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    @do_while
    def game_loop():
        print_ln('Starting a new round of the game.')

        # Clients socket id (integer).
        client_sockets = Array(MAX_NUM_CLIENTS, regint)
       
        # Number of clients
        number_clients = MemValue(regint(0))
       
        # Clients secret input.
        client_values = Array(MAX_NUM_CLIENTS, sint)
       
        # Client ids to identity client
        client_ids = Array(MAX_NUM_CLIENTS, sint)

        # Loop round waiting for each client to connect
        @do_while
        def client_connections():
            
            client_sockets[number_clients], client_ids[number_clients], client_values[number_clients], finish = accept_client_input()
            number_clients.write(number_clients+1)

            # continue while both expressions are false
            return (number_clients >= MAX_NUM_CLIENTS) + finish.reveal() == 0 


        client_action = client_values[0].reveal()
        #####################################
        # (IF) CLIENT WANTS TO GET A RANDOM VALUE
        #####################################
        if_then(client_action == 0)
        print_ln("Client wants a random value.")
        rand = sint.get_random_int(40)
        write_value_to_clients(client_sockets, number_clients, rand)
        end_if()

        #####################################
        # (IF) CLIENT WANTS TO GET DIVISION + COMPARISON
        #####################################
        if_then(client_action == 1)
        val1 = sfix(100)
        val2 = sfix(50)
        div = val1/val2
        cmp = val1 < val2
        write_value_to_clients(client_sockets, number_clients, cmp)
        end_if()

        return True

main()
